import sqlite3
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from utils.context_helpers import get_effective_message
import os


DB_PATH = os.path.join(os.path.dirname(__file__), "..", "db", "lootbot.db")
DB_PATH = os.path.abspath(DB_PATH)


async def insights_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = get_effective_message(update)

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, COALESCE(short_title, title) FROM articles ORDER BY id DESC LIMIT 15")
    articles = cursor.fetchall()
    conn.close()

    if not articles:
        await message.reply_text("üòï –ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.")
        return

    keyboard = [
        [InlineKeyboardButton(title, callback_data=f"article:{article_id}")]
        for article_id, title in articles
    ]
    keyboard.append([InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])

    await message.reply_text(
        text="üß† *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def articles_by_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, category_id = query.data.split(":")

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, title FROM articles WHERE category_id = ?", (category_id,))
    articles = cursor.fetchall()
    conn.close()

    if not articles:
        await query.edit_message_text("üòï –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π.")
        return

    keyboard = [
        [InlineKeyboardButton(title, callback_data=f"article:{article_id}")]
        for article_id, title in articles
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_insights")])

    await query.edit_message_text(
        text="üìÑ –°—Ç–∞—Ç—å–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def article_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, article_id = query.data.split(":")

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT title, description, post_link FROM articles WHERE id = ?", (article_id,))
    article = cursor.fetchone()
    conn.close()

    if not article:
        await query.edit_message_text("‚ö†Ô∏è –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    title, desc, link = article
    text = f"*{title}*\n\n{desc}\n\nüîó [–ß–∏—Ç–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ]({link})"

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç—å—è–º", callback_data="go_insights")],
        [InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    await query.edit_message_text(text=text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))


async def back_to_articles_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await insights_handler(update, context)