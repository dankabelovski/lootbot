from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from services.llm_client import ask_assistant
from services.tool_matcher import find_tools_by_query
from services.article_search import find_articles_by_query
from log import logger
from db.users import get_user_model
from services.prompt_templates import CLAUDE_PROMPT_TEMPLATE, MISTRAL_PROMPT_TEMPLATE
from db.tags import get_all_tags


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    chat_id = update.effective_chat.id

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    model = context.user_data.get("llm_model")
    if not model:
        model = get_user_model(chat_id)
        context.user_data["llm_model"] = model

    # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    history = context.user_data.get("chat_history", [])
    history.append({"role": "user", "content": user_input})

    # –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
    if "claude" in model:
        system_prompt = CLAUDE_PROMPT_TEMPLATE.format(user_input=user_input)
    else:
        system_prompt = MISTRAL_PROMPT_TEMPLATE.format(user_input=user_input)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    prompt_messages = [{"role": "system", "content": system_prompt}] + history[-5:]  # –º–∞–∫—Å–∏–º—É–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–ø–ª–∏–∫

    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    try:
        short_reply = await ask_assistant(prompt_messages, model=model)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
        return

    await update.message.reply_text(short_reply)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append({"role": "assistant", "content": short_reply})
    context.user_data["chat_history"] = history
    context.user_data["last_query"] = user_input

    # –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–µ–π
    tools = find_tools_by_query(user_input)
    articles = find_articles_by_query(user_input)

    buttons = []
    if tools:
        for tool_id, name in tools:
            buttons.append([InlineKeyboardButton(f"üõ† {name}", callback_data=f"tool:{tool_id}:auto")])

    if articles:
        for article_id, short_title in articles:
            buttons.append([InlineKeyboardButton(f"üìö {short_title}", callback_data=f"article:{article_id}")])

    if tools or articles:
        buttons.append([InlineKeyboardButton("üìñ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="assistant_reply")])

    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])

    await update.message.reply_text(
        "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É:" if tools or articles else "üìå –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


async def assistant_explain_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_input = context.user_data.get("last_query", "")
    if not user_input:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å.")
        return

    model = context.user_data.get("llm_model")
    if not model:
        model = get_user_model(query.from_user.id)

    history = context.user_data.get("chat_history", [])
    history.append({"role": "user", "content": user_input})

    prompt = "–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ —Ç–µ–º–µ, –≤–∫–ª—é—á–∞—è –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    full_prompt = [{"role": "system", "content": prompt}] + history[-5:]

    await context.bot.send_chat_action(chat_id=query.message.chat.id, action="typing")
    try:
        response = await ask_assistant(full_prompt, model=model)
        history.append({"role": "assistant", "content": response})
        context.user_data["chat_history"] = history
        await query.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—è—Å–Ω–µ–Ω–∏—è: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ.")
