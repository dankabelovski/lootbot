from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from services.llm_client import ask_assistant
from services.tool_matcher import find_tools_by_query
from services.article_search import find_articles_by_query
from log import logger
from db.users import get_user_model

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    chat_id = update.effective_chat.id



    # –®–∞–≥ 1. –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    prompt = (
        f"–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Telegram-–±–æ—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ —Å—Ç–∞—Ç—å—è–º–∏."
        f" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '{user_input}'."
        f" –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Å—Ç–∞—Ç—å–∏, —É–ø–æ–º—è–Ω–∏, —á—Ç–æ –æ–Ω–∏ –Ω–∞–π–¥–µ–Ω—ã."
    )

    try:
        short_reply = await ask_assistant(prompt, model=context.user_data.get("llm_model"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
        return

    await update.message.reply_text(short_reply)

    # –®–∞–≥ 2. –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    tools = find_tools_by_query(user_input)
    articles = find_articles_by_query(user_input)

    buttons = []

    if tools:
        for tool_id, name in tools:
            buttons.append([InlineKeyboardButton(f"üõ† {name}", callback_data=f"tool:{tool_id}:auto")])

    if articles:
        for article_id, title in articles:
            buttons.append([InlineKeyboardButton(f"üìö {title}", callback_data=f"article:{article_id}")])

    if tools or articles:
        buttons.append([InlineKeyboardButton("üìñ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"assistant_reply:{user_input}")])
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])
        await update.message.reply_text(
            "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ
        await update.message.reply_text(
            "üìå –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"assistant_reply:{user_input}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )


async def assistant_explain_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_input = query.data.split(":", 1)[1]

    prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {user_input}. –î–∞–π –ø–æ–ª–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º."
    try:
        response = await ask_assistant(prompt)
        await query.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—è—Å–Ω–µ–Ω–∏—è: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ.")
