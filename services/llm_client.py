import os
import httpx
from dotenv import load_dotenv
from log import logger

load_dotenv()

API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"
REFERER = os.getenv("OPENROUTER_REFERER")  # —Ç–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π

HEADERS = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

# –î–æ–±–∞–≤–ª—è–µ–º HTTP-Referer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ .env
if REFERER:
    HEADERS["HTTP-Referer"] = REFERER


async def ask_assistant(messages: list, model: str = "mistralai/mistral-7b-instruct") -> str:
    body = {
        "model": model,
        "messages": messages,
        "temperature": 0.7
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(OPENROUTER_URL, headers=HEADERS, json=body, timeout=30)
            response.raise_for_status()
            result = response.json()
            reply = result["choices"][0]["message"]["content"]
            logger.info(f"üß† –û—Ç–≤–µ—Ç –æ—Ç {model}: {reply}")
            return reply
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        raise